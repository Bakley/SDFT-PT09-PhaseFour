We write oop and use an orm to connect to the database


Relationships in a relational database
1. One to One
 => One record in a table is linked to exactly on record in another
2. One to Many
 => One record in a table is linked to multiple records in another 
3. Many to Many
 => Multiple record in one table can be associated with multiple records in another table

We've been using an orm
-> Define models
-> Manage Relationships
-> Handle database migrations

Key concepts
=> Foreign Keys
=> db.Relationships()
=> back_populates
=> Cascades
=> Database migrations
=> Database normalization


Many to Many Key concepts
=> Association Table/Join Table:
    #=> A table that links two table in a many-to-many Relationships
    #=> It only stores a pair of foreign key
    A simple table with two columns
    Used when you don't need extra details, only used to see whose connected

A soldier is in multiple teams, and a team can have multiple soldiers

#=> John Doe is in Alpha Squad, Delta Ops, and Navy seal 5
#=> Delta Ops has John Doe, Jane Doe, Jack Bower, John Wick, and Bob
#=> Alpha Squad has John Doe, John Wick, and Ethan Hawke

=> Association Objects
    This a full SQLAlchemy model that acts as middle many between 2 tables in a many-to-many relationship
    = Foreign Keys
    = Extra columns
    = Relationships
    A many to many relationship implemented as 2 one-to-many relationships


Soldiers can join multiple missions, and each mission can have multiple soldiers

One soldier can be on many missions
 =>John Wick is a sniper in manhantan, a medic in black_hawk_down, and a paratropper in skyfall

One mission can involve many soldiers
 => Night Hawk needs a medic, a pilot, a linguistic expert, and a commander